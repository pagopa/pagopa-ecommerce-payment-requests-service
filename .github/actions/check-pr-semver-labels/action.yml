name: Check PR semantic versioning labels
description: "Check semantic versioning labels"

inputs:
  github_token:
    required: true
    description: The github token used to read PR metadata

outputs:
  semver_app:
    description: "Application semantic version label"
    value: ${{ steps.check_labels.outputs.semver_app }}
  semver_chart:
    description: "Chart semantic version label"
    value: ${{ steps.check_labels.outputs.semver_chart }}
  skip_release:
    description: "Skip release flag"
    value: ${{ steps.check_labels.outputs.skip_release }}
runs:
  using: "composite"
  steps:
    - name: Retrieve semantic versioning labels on PR
      id: check_labels
      uses: actions/github-script@v6.3.3
      env:
        VALID_APP_VERSION_LABELS: patch, minor, major, ignore-for-release
        VALID_CHART_VERSION_LABELS: chart-patch, chart-minor, chart-major
        SKIP_RELEASE_LABEL: skip-release
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const { VALID_APP_VERSION_LABELS, VALID_CHART_VERSION_LABELS, SKIP_RELEASE_LABEL } = process.env
          const validLabelsSemver = VALID_APP_VERSION_LABELS.trim().split(',').map(word => word.trim()).filter(word => word.length > 0);
          const validLabelsChartSemver = VALID_CHART_VERSION_LABELS.trim().split(',').map(word => word.trim()).filter(word => word.length > 0);
          const skipReleaseLabel = SKIP_RELEASE_LABEL.trim();
          var issueNumber = context.issue.number;
          if (issueNumber === undefined) {
            core.info('Retrieving issue number from merge commit message')
            var mergeCommit = await github.rest.git.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
            });
            if (!mergeCommit) {
              throw `Could not find commit for sha ${context.sha}`;
            }
            const commitMessage = mergeCommit.data.message;
            core.info(`Commit message: ${commitMessage}`);
            const extractedPrNumber = commitMessage.match('\\(#(\\d{1,9})\\)'); 
            if(extractedPrNumber ==null || extractedPrNumber.length <1){
               throw `Could not extract PR number from commit message ${commitMessage}`;
            }
            const prNumber = extractedPrNumber[1];
            core.info(`Extracted PR number: ${prNumber}`);
            issueNumber = prNumber;
          }
          core.info(`Issue number: ${issueNumber}`);
          var labelsQuery = await github.rest.issues.listLabelsOnIssue({
            issue_number: issueNumber,
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          var prLabels = labelsQuery.data.map(label => label.name);
          core.info(
            `PR labels: ${prLabels}
          Valid labels semver: ${validLabelsSemver}
          Valid labels chart semver: ${validLabelsChartSemver}
          Skip release label: ${skipReleaseLabel}`
          );
          var matchedLabelsSemver = [];
          var matchedLabelsChartSemver = [];
          var skipRelease = false;
          prLabels.forEach(label => {
            core.info(`Analyzing label: ${label}`);
            if (validLabelsSemver.includes(label)) {
              matchedLabelsSemver.push(label)
            }
            if (validLabelsChartSemver.includes(label)) {
              matchedLabelsChartSemver.push(label)
            }
            if (label == skipReleaseLabel) {
              skipRelease = true;
            }
          }
          );
          core.info(
            `Matched labels semver: ${matchedLabelsSemver}
          chart semver: ${matchedLabelsChartSemver}`
          )
          var comments = await github.rest.issues.listComments({
            issue_number: issueNumber,
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          for (const comment of comments.data) {
            if (comment.body.includes('Pull request label validation error!')) {
              github.rest.issues.deleteComment({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              })
            }
          }

          if ((matchedLabelsSemver.length != 1 || matchedLabelsChartSemver.length != 1) && !skipRelease) {
            const errorMessage =
              `Pull request label validation error!
          Required label for app version: ${validLabelsSemver.map(label => `\`${label}\``).join()}
          Required label for chart version: ${validLabelsChartSemver.map(label => `\`${label}\``).join()}.

          Found labels on PR...

          app version: ${matchedLabelsSemver.map(label => `\`${label}\``).join()}
          chart version: ${matchedLabelsChartSemver.map(label => `\`${label}\``).join()}

          If you want to skip release for this PR add \`${skipReleaseLabel}\` label
          `
            github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: errorMessage
            })
            core.setFailed('Missing required labels')
          } else {
            if (skipRelease) {
              core.setOutput("semver_app", "none");
              core.setOutput("semver_chart", "patch");
              core.setOutput("skip_release", "True");
            } else {
              core.setOutput("semver_app", matchedLabelsSemver[0]);
              core.setOutput("semver_chart", matchedLabelsChartSemver[0]);
              core.setOutput("skip_release", "False");
            }
          }
# Deploy to Azure Kubernetes Service:
# - DEV
# - UAT -> PROD
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

parameters:
  - name: 'DEV_DEPLOY'
    displayName: 'Deploy on DEV environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'UAT_PROD_DEPLOY'
    displayName: 'Deploy on UAT environment with PROD promotion'
    type: boolean
    default: False
    values:
      - False
      - True
  - name: 'SKIP_BUILD'
    displayName: 'Check this flag to skip build and proceed to deploy a docker image previously built'
    type: boolean
    default: False
    values:
      - False
      - True
  - name: "FORCE_REPLACE_DOCKER_IMAGE"
    displayName: "Force the existing docker image to be replaced (latest tag)"
    type: boolean
    default: False
    values:
      - False
      - True
  - name: "UAT_SKIP_BLUE_DEPLOYMENT"
    displayName: "Skip blue/green UAT deployment strategy: activating this parameter no blue version will be created and the pipeline proceed building and deploy artifact green version"
    type: boolean
    default: True
    values:
      - False
      - True
  - name: "PROD_SKIP_BLUE_DEPLOYMENT"
    displayName: "Skip blue/green PROD deployment strategy: activating this parameter no blue version will be created and the pipeline proceed building and deploy artifact green version"
    type: boolean
    default: True
    values:
      - False
      - True
  - name: "NATIVE_COMPILATION"
    displayName: "Boolean flag to use native compilation or JVM runtime for the output executable: activating this parameter native compilation will be used, jvm otherwise"
    type: boolean
    default: True
    values:
      - False
      - True

variables:
  - ${{ if eq(parameters['NATIVE_COMPILATION'], True) }}:
      - name: DOCKER_FILE_NAME
        value: "Dockerfile.native"
      - name: DOCKER_FILE_VERSION_SUFFIX
        value: ""
  - ${{ else }}:
      - name: DOCKER_FILE_NAME
        value: "Dockerfile.jvm"
      - name: DOCKER_FILE_VERSION_SUFFIX
        value: "-jvm"

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v6.14.0
      endpoint: 'io-azure-devops-github-ro'
    - repository: pagopaCheckoutTests
      type: github
      name: pagopa/pagopa-checkout-tests
      ref: main
      endpoint: 'io-azure-devops-github-ro'

pool:
  vmImage: ubuntu-latest

# --- START Deploy DEV --- #
stages:

  - stage: 'Build_for_DEV'
    displayName: 'Build for DEV'
    condition: and(succeeded(), not(${{ parameters.SKIP_BUILD }}), eq(${{parameters.DEV_DEPLOY}}, true))
    jobs:
      - job: Build_docker
        displayName: Build docker with Build.SourceVersion as TAG
        steps:
          - template: templates/docker-release/template.yaml@pagopaCommons
            parameters:
              CONTAINER_REGISTRY_SERVICE_CONN: $(DEV_CONTAINER_REGISTRY_SERVICE_CONN)
              CONTAINER_REGISTRY_FQDN: $(DEV_CONTAINER_NAMESPACE)
              DOCKER_IMAGE_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
              DOCKER_IMAGE_TAG: $(Build.SourceVersion)${{ variables.DOCKER_FILE_VERSION_SUFFIX }}
              FORCE_REPLACE_DOCKER_IMAGE: ${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}
              DOCKERFILE: ${{ variables.DOCKER_FILE_NAME }}

  - stage: 'Deploy_for_DEV'
    displayName: 'Deploy DEV'
    dependsOn: Build_for_DEV
    condition: or(succeeded(), ${{ parameters.SKIP_BUILD }}, eq(${{parameters.DEV_DEPLOY}}, true) )
    jobs:
      - deployment: "deploy"
        environment: 'DEV'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    ENV: 'DEV'
                    KUBERNETES_SERVICE_CONN: $(DEV_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: ecommerce
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
                    VALUE_FILE: "helm/values-dev.yaml"
                    GREEN_VERSION: $(Build.SourceVersion)
                    BLUE_VERSION: $(Build.SourceVersion)

  - stage: "API_DEV_test"
    displayName: 'Running API test on dev app'
    dependsOn: Deploy_for_DEV
    jobs:
      - job: newman_api_test
        steps:
          - checkout: pagopaCheckoutTests
          - template: azure-templates/api-tests.yml
            parameters:
              CHECKOUT_FOR_ECOMMERCE_COLLECTION: "api-tests/checkout-tests/npg/checkout-for-ecommerce-api.tests.json"
              ENV_FILE: "api-tests/dev.envs.json"
              TEST_FILE_PREFIX: "dev"

  - stage: "E2E_Tests_Checkout_DEV_environment"
    displayName: 'Running E2E test on dev app'
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: Deploy_for_DEV
    jobs:
      - job: e2e_tests
        steps:
          - template: .devops/azure-templates/e2e-tests.yaml@pagopaCheckoutTests
            parameters:
              ENVIRONMENT: DEV
              CHECKOUT_RESOURCE_REPO_NAME: pagopaCheckoutTests
  # --- END Deploy DEV --- #

  # --- START Deploy UAT --- #
  - stage: "Build_release_candidate"
    displayName: 'Build release candidate'
    dependsOn: [ ]
    condition:
      and(
      succeeded(),
      eq(${{parameters.UAT_PROD_DEPLOY}}, true)
      )
    jobs:
      - job: "build"
        displayName: 'Build release candidate docker image'
        steps:
          - template: templates/docker-release/template.yaml@pagopaCommons
            parameters:
              CONTAINER_REGISTRY_SERVICE_CONN: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
              CONTAINER_REGISTRY_FQDN: $(UAT_CONTAINER_NAMESPACE)
              DOCKER_IMAGE_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
              DOCKER_IMAGE_TAG: $(Build.SourceVersion)${{ variables.DOCKER_FILE_VERSION_SUFFIX }}
              FORCE_REPLACE_DOCKER_IMAGE: ${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}
              DOCKERFILE: ${{ variables.DOCKER_FILE_NAME }}
          - template: azure-templates/chart-current-version.yml

  - stage: "Deploy_UAT_Blue"
    displayName: 'UAT blue deployment'
    dependsOn: Build_release_candidate
    condition:
      and(
      succeeded(),
      eq(${{parameters.UAT_SKIP_BLUE_DEPLOYMENT}}, False)
      )
    variables:
      green_app_version: $[ stageDependencies.Build_release_candidate.build.outputs['chart_current_version.appVersion'] ]
    jobs:
      - deployment: "Blue_deployment"
        displayName: "Blue deployment"
        pool:
          name: pagopa-uat-linux
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: KubectlInstaller@0
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    DO_BLUE_GREEN_DEPLOY: true
                    ENV: 'UAT'
                    KUBERNETES_SERVICE_CONN: $(UAT_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: ecommerce
                    APP_NAME: beta-$(K8S_IMAGE_REPOSITORY_NAME)
                    VALUE_FILE: "helm/values-uat.yaml"
                    GREEN_VERSION: $(green_app_version)
                    BLUE_VERSION: $(Build.SourceVersion)


  - stage: "API_Blue_UAT_test"
    displayName: 'Running API test on blue app'
    dependsOn: Deploy_UAT_Blue
    jobs:
      - job: newman_api_test
        steps:
          - checkout: pagopaCheckoutTests
          - template: azure-templates/api-tests.yml
            parameters:
              CHECKOUT_FOR_ECOMMERCE_COLLECTION: "api-tests/checkout-tests/npg/checkout-for-ecommerce-api.tests.json"
              ENV_FILE: "api-tests/uat.payment-requests.blue.envs.json"
              TEST_FILE_PREFIX: "blue-uat"

  - stage: "Bluegreen_WaitForApproval"
    displayName: 'UAT green approval deployment'
    dependsOn: API_Blue_UAT_test
    variables:
      commitUrl: $[ stageDependencies.Build_release_candidate.build.outputs['chart_current_version.commitUrl'] ]
    jobs:
      - job: Bluegreen_WaitForApproval
        displayName: Manual blue deploy approval
        pool: server
        timeoutInMinutes: 4320 # 3 days
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 4320 # 3 days
            inputs:
              notifyUsers: $(APPROVE_TOUCHPOINT_MAIL)
              instructions: "Please approve or reject UAT blue green promotions for $(commitUrl)"
              onTimeout: 'reject'


  - stage: "Get_Release_Version"
    displayName: "Get the app version to deploy"
    dependsOn: Build_release_candidate
    condition: in(dependencies.Build_release_candidate.result, 'Succeeded', 'Skipped')
    jobs:
      - job: "get_version"
        steps:
          - template: azure-templates/chart-current-version.yml

  - stage: "tag_docker_release"
    displayName: 'Tag Docker image to be release'
    dependsOn: Get_Release_Version
    condition:
      and(
      succeeded(),
      eq(${{parameters.SKIP_BUILD}}, False)
      )
    variables:
      app_version: cdctest
    jobs:
      - job: "build"
        displayName: 'Build UAT service beta'
        steps:
          - task: Docker@2
            displayName: "docker login"
            inputs:
              containerRegistry: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
              command: "login"
          - task: Bash@3
            displayName: "docker tag new version"
            inputs:
              targetType: "inline"
              script: |
                docker pull $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion)${{ variables.DOCKER_FILE_VERSION_SUFFIX }}
                docker tag $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion)${{ variables.DOCKER_FILE_VERSION_SUFFIX }} $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(app_version)${{ variables.DOCKER_FILE_VERSION_SUFFIX }}
                docker push $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(app_version)${{ variables.DOCKER_FILE_VERSION_SUFFIX }}

  - stage: "Deploy_UAT_Green"
    displayName: 'UAT green deployment'
    dependsOn: [ tag_docker_release,Get_Release_Version ]
    condition: |
      and(
        eq(${{parameters.UAT_PROD_DEPLOY}}, true),
        in(dependencies.tag_docker_release.result, 'Succeeded', 'Skipped'),
        in(dependencies.Release.result, 'Succeeded', 'Skipped')
      )
    variables:
      app_version: cdctest
    jobs:
      - deployment: "Green_deployment"
        displayName: "Green deployment"
        pool:
          name: pagopa-uat-linux
        environment: 'UAT'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: KubectlInstaller@0
                - task: Bash@3
                  name: update_chart_version
                  displayName: 'Setup helm microservice chart'
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: azure-templates/helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    DO_BLUE_GREEN_DEPLOY: false
                    ENV: 'UAT'
                    KUBERNETES_SERVICE_CONN: $(UAT_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: ecommerce
                    APP_NAME: pagopaecommercepaymentrequestsservice-b
                    VALUE_FILE: "helm/values-uat.yaml"
                    GREEN_VERSION: $(app_version)
